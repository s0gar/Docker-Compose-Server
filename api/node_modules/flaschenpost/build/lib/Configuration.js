"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Configuration = void 0;
const app_root_path_1 = __importDefault(require("app-root-path"));
const lodash_1 = require("lodash");
const readPackageJson_1 = require("./readPackageJson");
class Configuration {
    constructor(debugModuleFilter, formatter, output, highestEnabledLogLevel, hostname, logEntryIdGenerator) {
        this.application = (0, readPackageJson_1.readPackageJson)(app_root_path_1.default.path);
        this.debugModuleFilter = debugModuleFilter;
        this.formatter = formatter;
        this.output = output;
        this.highestEnabledLogLevel = highestEnabledLogLevel;
        this.hostname = hostname;
        this.logEntryIdGenerator = logEntryIdGenerator;
    }
    withApplication(application) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.application = application;
        return newConfiguration;
    }
    withDebugModuleFilter(debugModuleFilter) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.debugModuleFilter = debugModuleFilter;
        return newConfiguration;
    }
    withFormatter(formatter) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.formatter = formatter;
        return newConfiguration;
    }
    withOutput(output) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.output = output;
        return newConfiguration;
    }
    withHighestEnabledLogLevel(highestEnabledLogLevel) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.highestEnabledLogLevel = highestEnabledLogLevel;
        return newConfiguration;
    }
    withHostname(hostname) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.hostname = hostname;
        return newConfiguration;
    }
    withLogEntryIdGenerator(logEntryIdGenerator) {
        const newConfiguration = (0, lodash_1.cloneDeep)(this);
        newConfiguration.logEntryIdGenerator = logEntryIdGenerator;
        return newConfiguration;
    }
}
exports.Configuration = Configuration;
